fun main () {
    // 기본 함수 호출
    test1()

    // 코틀린은 모든 함수와 메서드가 무언가를 반환한다.
    // 만약 개발자가 반환할 것을 명시하지 않으면
    // Unit 타입의 값이 반환된다.
    // 코틀른 다른 언어와 마찮가지로 함수나 메서드가 무언가를 반환하면
    // 반환하는 것에 대한 타입을 명시해야 한다.
    // 만약 Unit 타입을 반환한다면(개발자가 반환할 것을 명시하지 않았더라도..)
    // 반환타입을 생략할 수 있다.
    val r1 = test1()
    println("r1 : $r1")

    test2(100, 11.11, "문자열1")

    // 함수를 호출할 때 전달하는 값을 어떤 매개변수에 넣을지 설정할 수 있다.
    test2(a3="문자열2", a1=200, a2=22.22)

    test3(500, 55.55, "문자열5")
    test3(600, 66.66)
    test3(700)
    // a1은 기본값을 설정하지 않았기 때문에
    // a1에 들어갈 값을 전달하지 않으면 오류가 발생한다.
    // test3()
    test3(800, a3="문자열8")

    println("----------------------------")
    test4()
    test4(100)
    test4(11.11)
    test4(100, 11.11)
    println("----------------------------")

    test5()
    // 함수 내부에 정의한 함수는 함수를 정의한 함수 내부에서만 사용이 가능하다.
    // test6()
}

// 기본 함수
// 코틀린에서 반환할 값이 없다면 반환 타입에는 Unit을 작성해준다.
// 생략 가능하다
fun test1(){
    println("test1 호출")
    println("--------------------------")
}

// 매개 변수를 가지고 있는 함수
// 매개 변수에는 var나 val을 붙히지 못한다.
// 코틀린 코드가 자바 코드로 변경되면 전부다 클래스의 맴버로 정의된다.
// var나 val 을 붙혀서 선언한 변수들은 모두 클래스의 맴버 변수로 정의되고
// 이때 프로퍼티 형태로 정의가 된다.
// 하지만 매개변수는 자바코드로 변경되어도 매개 변수이기 때문에
// 프로퍼티 형태로 정의될 수 없다.
// 하지만 메서드 안에 선언하는 변수들은 모두 프로퍼티로 정의해줘야 한다.
fun test2(a1:Int, a2:Double, a3:String){
    println("test2 : $a1, $a2, $a3")
    println("--------------------------")
}

// 기본값을 가지고 있는 매개변수
// 기본값이 설정되어 있는 매개변수는 값을 전달하지 않으면
// 기본값이 매개변수에 저장된다.
fun test3(a1:Int, a2:Double=11.11, a3:String="기본문자열"){
    println("test3 : $a1, $a2, $a3")
    println("--------------------------------")
}

// 함수의 오버로딩
// 매개변수의 형태를 다르게 하여 똑같은 이름의 함수들을
// 만들어 사용할 수 있는 개념
fun test4(){
    println("test4 매개변수 없음")
}

fun test4(a1:Int){
    println("test4 정수형 변수 한개")
}

fun test4(a1:Double){
    println("test4 실수형 변수 한개")
}

fun test4(a1:Int, a2:Double){
    println("Test4 매개변수 두 개")
}

// 지역 함수
// 함수 내부에 만드는 함수
// 함수를 정의한 함수 내부에서만 사용이 가능하다.
fun test5(){
    println("test5 호출")

    fun test6(){
        println("test6 호출")
    }

    test6()
}